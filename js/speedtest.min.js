/* 2016-04-20 https://github.com/cgkineo/speedtest */
/*!
 * JavaScript Cookie v2.1.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */


(function() {

	if (window.speedtest) return;

//COOKIES
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function overlay (a,b) {
		for (var k in b) {
			a[k] = b[k];
		}
		return a;
	}

	function initCookie (converter) {
		function api (key, value, attributes) {
			var result;
			if (typeof document === 'undefined') {
				return;
			}

			// Write

			if (arguments.length > 1) {
				attributes = extend({
					path: '/'
				}, api.defaults, attributes);

				if (typeof attributes.expires === 'number') {
					var expires = new Date();
					expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
					attributes.expires = expires;
				}

				try {
					result = JSON.stringify(value);
					if (/^[\{\[]/.test(result)) {
						value = result;
					}
				} catch (e) {}

				if (!converter.write) {
					value = encodeURIComponent(String(value))
						.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
				} else {
					value = converter.write(value, key);
				}

				key = encodeURIComponent(String(key));
				key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
				key = key.replace(/[\(\)]/g, escape);

				return (document.cookie = [
					key, '=', value,
					attributes.expires && '; expires=' + attributes.expires.toUTCString(), // use expires attribute, max-age is not supported by IE
					attributes.path    && '; path=' + attributes.path,
					attributes.domain  && '; domain=' + attributes.domain,
					attributes.secure ? '; secure' : ''
				].join(''));
			}

			// Read

			if (!key) {
				result = {};
			}

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling "get()"
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var rdecode = /(%[0-9A-Z]{2})+/g;
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var name = parts[0].replace(rdecode, decodeURIComponent);
				var cookie = parts.slice(1).join('=');

				if (cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					cookie = converter.read ?
						converter.read(cookie, name) : converter(cookie, name) ||
						cookie.replace(rdecode, decodeURIComponent);

					if (this.json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					if (key === name) {
						result = cookie;
						break;
					}

					if (!key) {
						result[name] = cookie;
					}
				} catch (e) {}
			}

			return result;
		}

		api.set = api;
		api.get = function (key) {
			return api(key);
		};
		api.getJSON = function () {
			return api.apply({
				json: true
			}, [].slice.call(arguments));
		};
		api.defaults = {};

		api.remove = function (key, attributes) {
			api(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.withConverter = initCookie;

		return api;
	}
	var Cookie = initCookie(function () {});

//DOM MANIPULATION
	var $ = {

		domloaded: false,
		html: document.getElementsByTagName("html")[0],

		debounce: function(callback, timeout) {
			var timerhandle = null;
			return function() {
				if (timerhandle) clearTimeout(timerhandle);
				timerhandle = setTimeout(function() {
					callback();
				}, timeout || 17);
			};
		},

		one: function(dom, event, callback) {
			dom['_speedtest'+event] = $.callbackOnce(callback, dom);
			if (document.addEventListener) {
				dom.addEventListener(event, dom['_speedtest'+event], false);
			} else if (document.attachEvent)  {
				dom.attachEvent("on"+event, dom['_speedtest'+event]);
			}
		},

		on: function(dom, event, callback) {
			if (document.addEventListener) {
				dom.addEventListener(event, callback, false);
			} else if (document.attachEvent)  {
				dom.attachEvent("on"+event, callback);
			}
		},

		callbackOnce: function(callback, dom) {
			var callbackOnce =  function(e) {
				callback();
				$.off(dom, e.type, callbackOnce);
			};
			return callbackOnce;
		},

		off: function(dom, event, callback) {
			if (document.addEventListener) {
				dom.removeEventListener(event, callback);
			} else if (document.attachEvent)  {
				dom.detachEvent("on"+event, callback);
			}
		},

		attr: function(dom, name, value) {
			if (value === undefined) {
				return dom.getAttribute(name) || "";
			} else {
				dom.setAttribute(name, value);
			}
		},

		onDocumentLoaded: function(callback, no_wait_for_document) {
			if ($.domloaded) callback();
			if (no_wait_for_document) {
				setTimeout(callback, no_wait_for_document);
				return;
			}
			if (document.addEventListener) {
				$.one(document, "DOMContentLoaded", callback);
			} else if (document.attachEvent)  {
				$.on(document, "readystatechange", function() {
					if (document.readyState == "interactive") {
						callback();
					}
				});
			}
		},

		addClass: function(dom, className) {
			var classNames = $.attr(dom, "class").split(" ");
			for (var i = classNames.length-1, l = -1; i > l; i--) {
				if (classNames[i].toLowerCase() === className) {
					return;
				}
				if (classNames[i] === "") {
					classNames.splice(i,1);
				}
			}
			classNames.push(className);
			$.attr(dom, "class", classNames.join(" "));
		},

		removeClass: function(dom, className) {
			var classNames = $.attr(dom, "class").split(" ");
			for (var i = classNames.length-1, l = -1; i > l; i--) {
				if (classNames[i].toLowerCase() === className) {
					classNames.splice(i,1);
				}
				if (classNames[i] === "") {
					classNames.splice(i,1);
				}
			}
			$.attr(dom, "class", classNames.join(" "));
		}
	};

//SPEED TEST
	var speedtest = window.speedtest = {

		kbps: 0,
		low_kbps: 10000000,

		config: function(config) {
			speedtest.config.imagesURL = config.imagesURL;
			speedtest.config.interval = config.interval || speedtest.config.interval;
			speedtest.config.sample_age = config.sample_age || speedtest.config.sample_age;
			speedtest.config.idle_timeout = config.idle_timeout || speedtest.config.idle_timeout;
			speedtest.config.slow_threshold_kbps = config.slow_threshold_kbps || speedtest.config.slow_threshold_kbps;
			speedtest.config.offline_threshold_kbps = config.offline_threshold_kbps || speedtest.config.offline_threshold_kbps;
			speedtest.config.no_wait_for_document = config.no_wait_for_document || speedtest.config.no_wait_for_document;
			return speedtest;
		},

		test: function(callback) {

			for (var i = 0, l = priv.images.length; i < l; i++) {
				var img = priv.images[i];
				img.url = speedtest.config.imagesURL + "/" + img.name;
				priv.images[i].index = i;
			}

			priv.bandwidth({
				completedCount: 0,
				complete: function(rate) {
			
					var bytes_per_second = (priv.bytes_per_millisecond) * 1000;
					var bits_per_second = (bytes_per_second) * 8;
					var average_kilobits_per_second = (bits_per_second) / 1024;

					speedtest.kbps = Math.round(average_kilobits_per_second);
					speedtest.name = priv.get_speed_name(speedtest.kbps);

					var low_name = speedtest.low_name;
					var low_kbps = speedtest.low_kbps;

					if (speedtest.kbps < speedtest.low_kbps) {
						low_name = speedtest.name;
						low_kbps = speedtest.kbps;
					}

					priv.overtime.push({
						timestamp: (new Date()).getTime(),
						kbps: speedtest.kbps
					});

					var overtime = priv.calculateOvertime();
					if (overtime && overtime.kbps <= speedtest.kbps) {
						low_name = overtime.name;
						low_kbps = overtime.kbps;
					}

					Cookie.set("speedtest", JSON.stringify({
						low_name: low_name,
						low_kbps: low_kbps
					}));

					if (speedtest.low_name && speedtest.low_name !== low_name) {
						$.removeClass($.html, "speedtest-"+speedtest.low_name);
					}
					$.addClass($.html, "speedtest-"+low_name);
					
					speedtest.low_name = low_name;
					speedtest.low_kbps = low_kbps;

					if (typeof callback === "function") {
						callback.call(speedtest, low_name, low_kbps);
					}
				}
			});

			return speedtest;
		},

		onchange: function(callback, options) {

			options = options || {};
			if (options.immediate === undefined) options.immediate = true;
			if (options.on_rate_change === undefined) options.on_rate_change = false;

			priv.inchange = false;

			if (typeof callback !== "function") throw "onchange requires a callback function";

			priv.onchanges.push({
				callback: callback,
				options: options
			});
			callback._speedtestid = priv.uid++;

			priv.startChangeTimeout(options && options.immediate);

			priv.onInteraction();

			return speedtest;
		},

		offchange: function(callback) {
			for (var i = priv.onchanges.length-1, l = -1; i > l; i--) {
				if (callback === undefined || priv.onchanges[i].callback._speedtestid === callback._speedtestid) {
					priv.onchanges.splice(i,1);
				}
			}
			if (priv.onchanges.length === 0) {
				priv.finishChangeTimeout();
			}
			return speedtest;
		},

		

	};

//PRIVATE SPEEDTEST
	var priv = {

		imgs: [],

		received_bytes: 0,
		overall_milliseconds: 0,
		bytes_per_millisecond: 0,

		min_timeout: 500, // timeout before cancelling unfinished image downloads
		max_timeout: 2000,  // timeout before cancelling all image downloads
		allow_timeout: false,
		timedout: false,

		onchanges: [],
		change_timeout: null,
		interaction_timeout: null,
		uid: 0,		

		previous_low_kbps: null,
		previous_low_name: null,

		overtime: [],

		images: [
			{
				name: 'image-0.gif', //to determine latency
				type: 'overhead',
				size: 35
			},
			{
				name: 'image-1.png', //inaccurate but need for slow gprs, 2g, 3g
				type: 'minimum',
				size: 440
			},
			{
				name: 'image-4.png', //more accurate needed for 3g, dsl
				type: 'reset',
				size: 40836
			},
			{
				name: 'image-6.png', //better accuracty for 4g+
				size: 381756
			}
		],

		calculateOvertime: function() {
			var now = (new Date()).getTime();

			var min_kbps = 1000000000, total_count = 0, total_kbps = 0;
			for (var i = priv.overtime.length -1, l = -1; i > l; i--) {
				var ot = priv.overtime[i];
				if (now - ot.timestamp > speedtest.config.sample_age) {
					priv.overtime.splice(i,1);
				} else {
					if (ot.kbps < min_kbps) min_kbps = ot.kbps;
					total_kbps += ot.kbps;
					total_count++;
				}
			}
			if (total_count === 0) return;

			var average_kbps = total_kbps / total_count;

			var overtime = {};
			overtime.kbps = Math.round((min_kbps + average_kbps) / 2);
			overtime.name = priv.get_speed_name(overtime.kbps);

			return overtime;

		},

		startChangeTimeout: function(immediate) {

			if (priv.change_timeout) return;

			if (immediate) {
				priv.inchange = true;
				speedtest.test(priv.performChange);
			}

			priv.change_timeout = setInterval(function() {

				if (priv.inchange) return;
				priv.inchange = true;

				speedtest.test(priv.performChange);

			}, speedtest.config.interval);
		},

		finishChangeTimeout: function() {
			clearInterval(priv.change_timeout);
			priv.change_timeout = null;
		},

		performChange: function(rounded_average_kilobits_per_second, speed_name) {

			priv.inchange = false;

			for (var i = 0, l = priv.onchanges.length; i < l; i++) {
				if (priv.previous_low_name !== null && priv.previous_low_name === speedtest.low_name && !priv.onchanges[i].options.on_rate_change) continue;
				if (priv.previous_low_kbps !== null && priv.previous_low_kbps === speedtest.low_kbps) continue;
				priv.onchanges[i].callback(speedtest.low_name, speedtest.low_kbps);
			}

			priv.previous_low_name = speedtest.low_name;
			priv.previous_low_kbps = speedtest.low_kbps;

		},

		get_speed_name: function(rounded_average_kilobits_per_second) {
			if (speedtest.config.offline_threshold_kbps >= rounded_average_kilobits_per_second) return "offline";
			if (speedtest.config.slow_threshold_kbps >= rounded_average_kilobits_per_second) return "slow";
			return "fast";
		},

		bandwidth: function(options) {
			var start = (new Date()).getTime();

			priv.overall_milliseconds = 0;
			priv.received_bytes = 0;
			priv.timedout = false;
			priv.cancelled = false;
			priv.allow_timeout = false;
			priv.bytes_per_millisecond = 0;
			options.completed = false;

			if ($.domloaded) run();
			else $.onDocumentLoaded(run, speedtest.config.no_wait_for_document);

			function run() {
				priv.bandwidth_unit({
					imageIndex: 0,
					complete: function(image) {
						priv.bandwidth_count.call(speedtest, options, image)
						for (var i = 1, l = priv.images.length; i < l; i++) {
							priv.bandwidth_unit({
								imageIndex: i,
								complete: function(image) {
									priv.bandwidth_count.call(speedtest, options, image)
								}
							});
						}
						setTimeout(function() {
							if (priv.timedout) return;
							priv.timedout = true;
							if (priv.allow_timeout) {
								priv.cancelled = true;
								priv.bandwidth_complete.call(speedtest, options);
							}
						}, priv.min_timeout);
						setTimeout(function() {
							if (priv.cancelled) return;
							priv.cancelled = true;
							priv.bandwidth_complete.call(speedtest, options);
						}, priv.max_timeout);
					}
				});
				
			}
					
		},

		bandwidth_unit: function(imageOptions) {
			function load() {
				var finish = (new Date()).getTime();
				image.error = false;
				image.milliseconds = finish-start;
				imageOptions.complete.call(speedtest, image);
			}
			function error() {
				var finish = (new Date()).getTime();
				image.error = true;
				image.milliseconds = 100000000;
				imageOptions.complete.call(speedtest, image);
			}

			var image = priv.images[imageOptions.imageIndex];
			var img = document.createElement("img");
			var start = (new Date()).getTime();

			$.one(img, "load", load);
			$.one(img, "error", error);

			priv.imgs.push(img);
			img.setAttribute("src", image.url + "?t="+start);			
		},

		bandwidth_count: function(options, image, force) {
			options.completedCount++;

			if (image.error) {
				priv.overall_milliseconds = 0;
				priv.received_bytes = 0;

				priv.bytes_per_millisecond = 0;
				return priv.bandwidth_complete(options);
			}

			if (image.type === "overhead") {
				priv.overhead_milliseconds = image.milliseconds;
				return;
			}

			priv.allow_timeout = true;

			if (image.type === "reset") {
				priv.overall_milliseconds = 0;
				priv.received_bytes = 0;
			}

			var milliseconds = image.milliseconds - priv.overhead_milliseconds;
			if (milliseconds < 0) {
				milliseconds = Math.abs(milliseconds);
			}

			priv.overall_milliseconds += milliseconds;
			priv.received_bytes += image.size;

			priv.bytes_per_millisecond = priv.received_bytes / priv.overall_milliseconds;

			if (priv.timedout) return priv.bandwidth_complete(options);

			if (image.type === "minimum") {
				return;
			}
			
			if (options.completedCount === priv.images.length || force) {
				priv.bandwidth_complete(options);
			}
		},

		bandwidth_complete: function(options) {
			if (options.completed) return;
			options.completed = true;

			for (var i = 0, l = priv.imgs.length; i < l; i++) {
				var img = priv.imgs[i];
				$.off(img, "load", img._speedtestload);
				$.off(img, "error", img._speedtesterror);
				$.attr(img, "src","");	
			}

			priv.imgs = [];

			if (typeof options.complete === "function") {
				options.complete();
			}
		},

		onInteraction: function() {
			var now = (new Date()).getTime();

			var immediate = false;
			if (now - priv.last_interaction > speedtest.min_timeout) {
				immediate = true;
			}

			priv.last_interaction = now;

			clearTimeout(priv.interaction_timeout);
			priv.interaction_timeout = setTimeout(priv.finishChangeTimeout, speedtest.config.idle_timeout);

			priv.startChangeTimeout(immediate);
		}

	};


//INITIALIZATION
	overlay(speedtest.config, {
		imagesURL: null, //location of sample images
		interval: 20000, // milliseconds between checks (20sec)
		sample_age: 60000, // take lowest speed in latest timeslice (1min)
		idle_timeout: 60000, // time before idle state (1min)
		offline_threshold_kbps: 0,
		slow_threshold_kbps: 1000,
		no_wait_for_document: false
	});

	$.on(document, "click", priv.onInteraction);
	$.on(document, "keyup", priv.onInteraction);
	$.on(document, "scroll", $.debounce(priv.onInteraction, 250));

	$.onDocumentLoaded(function() {
		$.domloaded = true;
	}, speedtest.config.no_wait_for_document);

	var cookie = Cookie.get("speedtest");
	if (cookie) {
		//restore previous class on load

		cookie = JSON.parse(cookie);
		speedtest.low_name = cookie.low_name;
		speedtest.low_kbps = cookie.low_kbps;

		$.addClass($.html, "speedtest-"+speedtest.low_name);

	} else {
		//start slow

		speedtest.low_name = "slow";
		speedtest.low_kbps = 25;
		$.addClass($.html, "speedtest-slow");
	}

})();